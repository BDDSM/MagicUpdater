//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MagicUpdater.DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MagicUpdaterEntities : DbContext
    {
        public MagicUpdaterEntities()
            : base("name=MagicUpdaterEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActionsReport> ActionsReports { get; set; }
        public virtual DbSet<CommonGlobalSetting> CommonGlobalSettings { get; set; }
        public virtual DbSet<ComputerErrorsLog> ComputerErrorsLogs { get; set; }
        public virtual DbSet<LocalSetting> LocalSettings { get; set; }
        public virtual DbSet<LocalSettingsDictionary> LocalSettingsDictionaries { get; set; }
        public virtual DbSet<Logs1C> Logs1C { get; set; }
        public virtual DbSet<OperationGroup> OperationGroups { get; set; }
        public virtual DbSet<Operation> Operations { get; set; }
        public virtual DbSet<OperationsReport> OperationsReports { get; set; }
        public virtual DbSet<OperationsState> OperationsStates { get; set; }
        public virtual DbSet<OperationStatesVoc> OperationStatesVocs { get; set; }
        public virtual DbSet<OperationTypeAttribute> OperationTypeAttributes { get; set; }
        public virtual DbSet<OperationType> OperationTypes { get; set; }
        public virtual DbSet<ShedulerPluginTask> ShedulerPluginTasks { get; set; }
        public virtual DbSet<ShedulerStep> ShedulerSteps { get; set; }
        public virtual DbSet<ShedulerStepsUserHistory> ShedulerStepsUserHistories { get; set; }
        public virtual DbSet<ShedulerTaskHistory> ShedulerTaskHistories { get; set; }
        public virtual DbSet<ShedulerTask> ShedulerTasks { get; set; }
        public virtual DbSet<ShedulerTasksComputersList> ShedulerTasksComputersLists { get; set; }
        public virtual DbSet<ShedulerTasksUserHistory> ShedulerTasksUserHistories { get; set; }
        public virtual DbSet<ShopComputer> ShopComputers { get; set; }
        public virtual DbSet<Shop> Shops { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<ComputerErrorsLogView> ComputerErrorsLogViews { get; set; }
        public virtual DbSet<LocalSettingsView> LocalSettingsViews { get; set; }
        public virtual DbSet<ViewComputerErrorsLog> ViewComputerErrorsLogs { get; set; }
        public virtual DbSet<ViewOperation> ViewOperations { get; set; }
        public virtual DbSet<ViewOperationsForExecute> ViewOperationsForExecutes { get; set; }
        public virtual DbSet<ViewOperationsLight> ViewOperationsLights { get; set; }
        public virtual DbSet<ViewOperationsTop1000> ViewOperationsTop1000 { get; set; }
        public virtual DbSet<ViewOperationsTop1000_New> ViewOperationsTop1000_New { get; set; }
        public virtual DbSet<ViewOperationsTop5000> ViewOperationsTop5000 { get; set; }
        public virtual DbSet<ViewOperState> ViewOperStates { get; set; }
        public virtual DbSet<ViewShedulerStep> ViewShedulerSteps { get; set; }
        public virtual DbSet<ViewShopComputersServer> ViewShopComputersServers { get; set; }
        public virtual DbSet<ViewShopComputersServerFull> ViewShopComputersServerFulls { get; set; }
        public virtual DbSet<ShedulerStatus> ShedulerStatuses { get; set; }
        public virtual DbSet<ShedulerTaskMode> ShedulerTaskModes { get; set; }
        public virtual DbSet<ViewShedulerStepsVi> ViewShedulerStepsVis { get; set; }
        public virtual DbSet<ShedulerPluginTasksUserHistory> ShedulerPluginTasksUserHistories { get; set; }
    
        public virtual int AddOperState(Nullable<int> operationId, Nullable<int> operStateId)
        {
            var operationIdParameter = operationId.HasValue ?
                new ObjectParameter("OperationId", operationId) :
                new ObjectParameter("OperationId", typeof(int));
    
            var operStateIdParameter = operStateId.HasValue ?
                new ObjectParameter("OperStateId", operStateId) :
                new ObjectParameter("OperStateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOperState", operationIdParameter, operStateIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ChangeComputerParams(Nullable<int> pComputerId, string pShopId, string computerName, string computerAddress, Nullable<bool> pIs1CServer, Nullable<bool> pIsMainCashbox)
        {
            var pComputerIdParameter = pComputerId.HasValue ?
                new ObjectParameter("pComputerId", pComputerId) :
                new ObjectParameter("pComputerId", typeof(int));
    
            var pShopIdParameter = pShopId != null ?
                new ObjectParameter("pShopId", pShopId) :
                new ObjectParameter("pShopId", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var computerAddressParameter = computerAddress != null ?
                new ObjectParameter("ComputerAddress", computerAddress) :
                new ObjectParameter("ComputerAddress", typeof(string));
    
            var pIs1CServerParameter = pIs1CServer.HasValue ?
                new ObjectParameter("pIs1CServer", pIs1CServer) :
                new ObjectParameter("pIs1CServer", typeof(bool));
    
            var pIsMainCashboxParameter = pIsMainCashbox.HasValue ?
                new ObjectParameter("pIsMainCashbox", pIsMainCashbox) :
                new ObjectParameter("pIsMainCashbox", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ChangeComputerParams", pComputerIdParameter, pShopIdParameter, computerNameParameter, computerAddressParameter, pIs1CServerParameter, pIsMainCashboxParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ChangeComputerParams_Servece(Nullable<int> pComputerId, string pShopId, string computerName, string computerAddress, Nullable<bool> pIs1CServer, Nullable<bool> pIsMainCashbox, string pMagicUpdaterVersion)
        {
            var pComputerIdParameter = pComputerId.HasValue ?
                new ObjectParameter("pComputerId", pComputerId) :
                new ObjectParameter("pComputerId", typeof(int));
    
            var pShopIdParameter = pShopId != null ?
                new ObjectParameter("pShopId", pShopId) :
                new ObjectParameter("pShopId", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var computerAddressParameter = computerAddress != null ?
                new ObjectParameter("ComputerAddress", computerAddress) :
                new ObjectParameter("ComputerAddress", typeof(string));
    
            var pIs1CServerParameter = pIs1CServer.HasValue ?
                new ObjectParameter("pIs1CServer", pIs1CServer) :
                new ObjectParameter("pIs1CServer", typeof(bool));
    
            var pIsMainCashboxParameter = pIsMainCashbox.HasValue ?
                new ObjectParameter("pIsMainCashbox", pIsMainCashbox) :
                new ObjectParameter("pIsMainCashbox", typeof(bool));
    
            var pMagicUpdaterVersionParameter = pMagicUpdaterVersion != null ?
                new ObjectParameter("pMagicUpdaterVersion", pMagicUpdaterVersion) :
                new ObjectParameter("pMagicUpdaterVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ChangeComputerParams_Servece", pComputerIdParameter, pShopIdParameter, computerNameParameter, computerAddressParameter, pIs1CServerParameter, pIsMainCashboxParameter, pMagicUpdaterVersionParameter);
        }
    
        public virtual int ChengeShopForComputer(Nullable<int> pComputerId, string pShopId)
        {
            var pComputerIdParameter = pComputerId.HasValue ?
                new ObjectParameter("pComputerId", pComputerId) :
                new ObjectParameter("pComputerId", typeof(int));
    
            var pShopIdParameter = pShopId != null ?
                new ObjectParameter("pShopId", pShopId) :
                new ObjectParameter("pShopId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChengeShopForComputer", pComputerIdParameter, pShopIdParameter);
        }
    
        public virtual int ComputerResponse(Nullable<int> pComputerId, string computerName, string computerAddress, Nullable<bool> isTaskerAlive)
        {
            var pComputerIdParameter = pComputerId.HasValue ?
                new ObjectParameter("pComputerId", pComputerId) :
                new ObjectParameter("pComputerId", typeof(int));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var computerAddressParameter = computerAddress != null ?
                new ObjectParameter("ComputerAddress", computerAddress) :
                new ObjectParameter("ComputerAddress", typeof(string));
    
            var isTaskerAliveParameter = isTaskerAlive.HasValue ?
                new ObjectParameter("isTaskerAlive", isTaskerAlive) :
                new ObjectParameter("isTaskerAlive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ComputerResponse", pComputerIdParameter, computerNameParameter, computerAddressParameter, isTaskerAliveParameter);
        }
    
        public virtual ObjectResult<GetComputerSettings_Result> GetComputerSettings(string pComputerHash)
        {
            var pComputerHashParameter = pComputerHash != null ?
                new ObjectParameter("pComputerHash", pComputerHash) :
                new ObjectParameter("pComputerHash", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetComputerSettings_Result>("GetComputerSettings", pComputerHashParameter);
        }
    
        public virtual ObjectResult<GetComputerSettingsViaMac_Result> GetComputerSettingsViaMac(string pMac)
        {
            var pMacParameter = pMac != null ?
                new ObjectParameter("pMac", pMac) :
                new ObjectParameter("pMac", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetComputerSettingsViaMac_Result>("GetComputerSettingsViaMac", pMacParameter);
        }
    
        public virtual ObjectResult<GetComputersList_Result> GetComputersList(Nullable<int> computerId)
        {
            var computerIdParameter = computerId.HasValue ?
                new ObjectParameter("ComputerId", computerId) :
                new ObjectParameter("ComputerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetComputersList_Result>("GetComputersList", computerIdParameter);
        }
    
        public virtual int LogError(Nullable<int> computerId, string errorMessage)
        {
            var computerIdParameter = computerId.HasValue ?
                new ObjectParameter("ComputerId", computerId) :
                new ObjectParameter("ComputerId", typeof(int));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogError", computerIdParameter, errorMessageParameter);
        }
    
        public virtual ObjectResult<RegisterComputer_Result> RegisterComputer(string pShopId, string pComputerName, string pComputerAddress, Nullable<bool> pIs1CServer, Nullable<bool> pIsMainCashbox, string pMac)
        {
            var pShopIdParameter = pShopId != null ?
                new ObjectParameter("pShopId", pShopId) :
                new ObjectParameter("pShopId", typeof(string));
    
            var pComputerNameParameter = pComputerName != null ?
                new ObjectParameter("pComputerName", pComputerName) :
                new ObjectParameter("pComputerName", typeof(string));
    
            var pComputerAddressParameter = pComputerAddress != null ?
                new ObjectParameter("pComputerAddress", pComputerAddress) :
                new ObjectParameter("pComputerAddress", typeof(string));
    
            var pIs1CServerParameter = pIs1CServer.HasValue ?
                new ObjectParameter("pIs1CServer", pIs1CServer) :
                new ObjectParameter("pIs1CServer", typeof(bool));
    
            var pIsMainCashboxParameter = pIsMainCashbox.HasValue ?
                new ObjectParameter("pIsMainCashbox", pIsMainCashbox) :
                new ObjectParameter("pIsMainCashbox", typeof(bool));
    
            var pMacParameter = pMac != null ?
                new ObjectParameter("pMac", pMac) :
                new ObjectParameter("pMac", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RegisterComputer_Result>("RegisterComputer", pShopIdParameter, pComputerNameParameter, pComputerAddressParameter, pIs1CServerParameter, pIsMainCashboxParameter, pMacParameter);
        }
    
        public virtual ObjectResult<RegisterComputer_Service_Result> RegisterComputer_Service(string pShopId, string pComputerName, string pComputerAddress, Nullable<bool> pIs1CServer, Nullable<bool> pIsMainCashbox, string pMac)
        {
            var pShopIdParameter = pShopId != null ?
                new ObjectParameter("pShopId", pShopId) :
                new ObjectParameter("pShopId", typeof(string));
    
            var pComputerNameParameter = pComputerName != null ?
                new ObjectParameter("pComputerName", pComputerName) :
                new ObjectParameter("pComputerName", typeof(string));
    
            var pComputerAddressParameter = pComputerAddress != null ?
                new ObjectParameter("pComputerAddress", pComputerAddress) :
                new ObjectParameter("pComputerAddress", typeof(string));
    
            var pIs1CServerParameter = pIs1CServer.HasValue ?
                new ObjectParameter("pIs1CServer", pIs1CServer) :
                new ObjectParameter("pIs1CServer", typeof(bool));
    
            var pIsMainCashboxParameter = pIsMainCashbox.HasValue ?
                new ObjectParameter("pIsMainCashbox", pIsMainCashbox) :
                new ObjectParameter("pIsMainCashbox", typeof(bool));
    
            var pMacParameter = pMac != null ?
                new ObjectParameter("pMac", pMac) :
                new ObjectParameter("pMac", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RegisterComputer_Service_Result>("RegisterComputer_Service", pShopIdParameter, pComputerNameParameter, pComputerAddressParameter, pIs1CServerParameter, pIsMainCashboxParameter, pMacParameter);
        }
    
        public virtual ObjectResult<SelectComputersByShop_Result> SelectComputersByShop(Nullable<int> pComputerID, string pShopId)
        {
            var pComputerIDParameter = pComputerID.HasValue ?
                new ObjectParameter("pComputerID", pComputerID) :
                new ObjectParameter("pComputerID", typeof(int));
    
            var pShopIdParameter = pShopId != null ?
                new ObjectParameter("pShopId", pShopId) :
                new ObjectParameter("pShopId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectComputersByShop_Result>("SelectComputersByShop", pComputerIDParameter, pShopIdParameter);
        }
    
        public virtual ObjectResult<SelectOperationsList_Result> SelectOperationsList(Nullable<int> pComputerID)
        {
            var pComputerIDParameter = pComputerID.HasValue ?
                new ObjectParameter("pComputerID", pComputerID) :
                new ObjectParameter("pComputerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectOperationsList_Result>("SelectOperationsList", pComputerIDParameter);
        }
    
        public virtual ObjectResult<SelectRestartOperation_Result> SelectRestartOperation(Nullable<int> pComputerID)
        {
            var pComputerIDParameter = pComputerID.HasValue ?
                new ObjectParameter("pComputerID", pComputerID) :
                new ObjectParameter("pComputerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectRestartOperation_Result>("SelectRestartOperation", pComputerIDParameter);
        }
    
        public virtual ObjectResult<SelectShopsList_Result> SelectShopsList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectShopsList_Result>("SelectShopsList");
        }
    
        public virtual int SendLog1C(Nullable<int> computerId, Nullable<bool> isError, string logMessage, Nullable<int> operationId)
        {
            var computerIdParameter = computerId.HasValue ?
                new ObjectParameter("ComputerId", computerId) :
                new ObjectParameter("ComputerId", typeof(int));
    
            var isErrorParameter = isError.HasValue ?
                new ObjectParameter("IsError", isError) :
                new ObjectParameter("IsError", typeof(bool));
    
            var logMessageParameter = logMessage != null ?
                new ObjectParameter("LogMessage", logMessage) :
                new ObjectParameter("LogMessage", typeof(string));
    
            var operationIdParameter = operationId.HasValue ?
                new ObjectParameter("OperationId", operationId) :
                new ObjectParameter("OperationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SendLog1C", computerIdParameter, isErrorParameter, logMessageParameter, operationIdParameter);
        }
    
        public virtual int SendOperationReport(Nullable<int> pOperationID, Nullable<bool> pIsCompleted, string pResult)
        {
            var pOperationIDParameter = pOperationID.HasValue ?
                new ObjectParameter("pOperationID", pOperationID) :
                new ObjectParameter("pOperationID", typeof(int));
    
            var pIsCompletedParameter = pIsCompleted.HasValue ?
                new ObjectParameter("pIsCompleted", pIsCompleted) :
                new ObjectParameter("pIsCompleted", typeof(bool));
    
            var pResultParameter = pResult != null ?
                new ObjectParameter("pResult", pResult) :
                new ObjectParameter("pResult", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SendOperationReport", pOperationIDParameter, pIsCompletedParameter, pResultParameter);
        }
    
        public virtual int SetActionReport(Nullable<int> pOperationId, Nullable<int> pComputerId, string pActionName, Nullable<bool> pIsFromLan, Nullable<bool> pIsCompleted, string pResult)
        {
            var pOperationIdParameter = pOperationId.HasValue ?
                new ObjectParameter("pOperationId", pOperationId) :
                new ObjectParameter("pOperationId", typeof(int));
    
            var pComputerIdParameter = pComputerId.HasValue ?
                new ObjectParameter("pComputerId", pComputerId) :
                new ObjectParameter("pComputerId", typeof(int));
    
            var pActionNameParameter = pActionName != null ?
                new ObjectParameter("pActionName", pActionName) :
                new ObjectParameter("pActionName", typeof(string));
    
            var pIsFromLanParameter = pIsFromLan.HasValue ?
                new ObjectParameter("pIsFromLan", pIsFromLan) :
                new ObjectParameter("pIsFromLan", typeof(bool));
    
            var pIsCompletedParameter = pIsCompleted.HasValue ?
                new ObjectParameter("pIsCompleted", pIsCompleted) :
                new ObjectParameter("pIsCompleted", typeof(bool));
    
            var pResultParameter = pResult != null ?
                new ObjectParameter("pResult", pResult) :
                new ObjectParameter("pResult", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetActionReport", pOperationIdParameter, pComputerIdParameter, pActionNameParameter, pIsFromLanParameter, pIsCompletedParameter, pResultParameter);
        }
    
        public virtual int SetExternalIp_Service(Nullable<int> pComputerId, string pExternalAddress)
        {
            var pComputerIdParameter = pComputerId.HasValue ?
                new ObjectParameter("pComputerId", pComputerId) :
                new ObjectParameter("pComputerId", typeof(int));
    
            var pExternalAddressParameter = pExternalAddress != null ?
                new ObjectParameter("pExternalAddress", pExternalAddress) :
                new ObjectParameter("pExternalAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetExternalIp_Service", pComputerIdParameter, pExternalAddressParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetMacAddress_Service(Nullable<int> pComputerId, string pShopId, string computerName, string computerAddress, Nullable<bool> pIs1CServer, Nullable<bool> pIsMainCashbox, string pMac)
        {
            var pComputerIdParameter = pComputerId.HasValue ?
                new ObjectParameter("pComputerId", pComputerId) :
                new ObjectParameter("pComputerId", typeof(int));
    
            var pShopIdParameter = pShopId != null ?
                new ObjectParameter("pShopId", pShopId) :
                new ObjectParameter("pShopId", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var computerAddressParameter = computerAddress != null ?
                new ObjectParameter("ComputerAddress", computerAddress) :
                new ObjectParameter("ComputerAddress", typeof(string));
    
            var pIs1CServerParameter = pIs1CServer.HasValue ?
                new ObjectParameter("pIs1CServer", pIs1CServer) :
                new ObjectParameter("pIs1CServer", typeof(bool));
    
            var pIsMainCashboxParameter = pIsMainCashbox.HasValue ?
                new ObjectParameter("pIsMainCashbox", pIsMainCashbox) :
                new ObjectParameter("pIsMainCashbox", typeof(bool));
    
            var pMacParameter = pMac != null ?
                new ObjectParameter("pMac", pMac) :
                new ObjectParameter("pMac", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetMacAddress_Service", pComputerIdParameter, pShopIdParameter, computerNameParameter, computerAddressParameter, pIs1CServerParameter, pIsMainCashboxParameter, pMacParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetOperationIsReaded(Nullable<int> pOperationID)
        {
            var pOperationIDParameter = pOperationID.HasValue ?
                new ObjectParameter("pOperationID", pOperationID) :
                new ObjectParameter("pOperationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetOperationIsReaded", pOperationIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_GetTableData(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetTableData", tableNameParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateVersion(Nullable<int> pComputerId, string pVersion)
        {
            var pComputerIdParameter = pComputerId.HasValue ?
                new ObjectParameter("pComputerId", pComputerId) :
                new ObjectParameter("pComputerId", typeof(int));
    
            var pVersionParameter = pVersion != null ?
                new ObjectParameter("pVersion", pVersion) :
                new ObjectParameter("pVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateVersion", pComputerIdParameter, pVersionParameter);
        }
    }
}
